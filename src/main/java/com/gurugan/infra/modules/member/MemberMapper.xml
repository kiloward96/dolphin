<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.gurugan.infra.modules.member.MemberMapper">

	<resultMap id="resultMapObj" type="com.gurugan.infra.modules.member.Member"></resultMap>

	<select id="selectList" resultMap="resultMapObj">
	<include refid="Base.selectListUpperForMysql"/>
		SELECT
			MB.seq AS MBseq
			,MB.id AS MBid
			,MB.password AS MBpassword
			,MB.name AS MBname
			,MB.gender AS MBgender
			,MB.dob AS MBdob
			,MB.mobile AS MBmobile
			,MB.email AS MBemail
			,MB.regDate AS MBregDate
			,MB.grade AS MBgrade
		FROM member MB
		WHERE 1=1
			AND MB.delYn = 0
		ORDER BY
			MB.seq DESC
	<include refid="Base.selectListLowerForMysql" />
	</select>
	
	<select id="selectOne" resultMap="resultMapObj">
		SELECT
			MB.seq AS MBseq
			,MB.id AS MBid
			,MB.password AS MBpassword
			,MB.name AS MBname
			,MB.gender AS MBgender
			,MB.dob AS MBdob
			,MB.mobile AS MBmobile
			,MB.email AS MBemail
			,MB.regDate AS MBregDate
			,MB.grade AS MBgrade
		FROM member MB
		WHERE 1=1
			AND MB.delYn = 0
			AND MB.seq = #{MBseq}
			<choose>
				<when test="shOption == 1">AND MB.seq = #{shValue}</when>
				<when test="shOption == 2">OR MB.id = #{MBid}</when>
				<otherwise></otherwise>
			</choose>
		ORDER BY
			MB.seq DESC
	</select>
	
	<select id="selectOneCount" resultType="Integer">
		SELECT COUNT(*)
			FROM member MB
		WHERE 1=1
			AND MB.delYn = 0
	  <!--   <choose>
				<when test="shDelYn == 2">AND CC.delYn IS NOT NULL</when>
				<when test="shDelYn != null and !shDelYn.equals('')">AND CC.delYn = #{shDelYn}</when>
				<otherwise></otherwise>
	    </choose>
	    <choose>
				<when test="shDate == 1">AND CC.regDate BETWEEN #{shStartDate} AND #{shEndDate}</when>
				<when test="shDate == 2">AND CC.modDate BETWEEN #{shStartDate} AND #{shEndDate}</when>
				<otherwise></otherwise>
		</choose>
		<choose>
			<when test="shOption == 1">AND CC.seq = #{shValue}</when>
			<when test="shOption == 2">AND CC.seqChar LIKE CONCAT ('%',#{shValue},'%')</when>
			<when test="shOption == 3">AND CC.codeName LIKE CONCAT ('%',#{shValue},'%') OR CC.codeNameEng LIKE CONCAT ('%',#{shValue},'%')</when>
			<otherwise></otherwise>
		</choose>
		<choose>
			<when test="shOption2 == 1">OR CC.seq = #{shValue2}</when>
			<when test="shOption2 == 2">OR CC.seqChar LIKE CONCAT ('%',#{shValue2},'%')</when>
			<when test="shOption2 == 3">OR CC.codeName LIKE CONCAT ('%',#{shValue2},'%')  OR CC.codeNameEng LIKE CONCAT ('%',#{shValue},'%')</when>
			<otherwise></otherwise>
		</choose> -->
	</select>
	
	<insert id="insert">
		INSERT INTO member (
			id
			,password
			,name
			,gender
			,mobile
			,email
			,regDate
			,delYn
			,grade
		) VALUES (
			#{MBid}
			,#{MBpassword}
			,#{MBname}
			,#{MBgender}
			,#{MBmobile}
			,#{MBemail}
			,NOW()
			,0
			<choose>
				<when test="MBgrade != null and !MBgrade.equals('')">,#{MBgrade}</when>
				<otherwise>,3</otherwise>
			</choose>
		)
	<selectKey resultType="String" keyProperty="MBseq" order="AFTER">
		SELECT last_insert_id()
	</selectKey>
	</insert>
	
	<insert id="insertAddress">
		INSERT INTO memberAddress (
			member_seq
			,addressName
			,addressZipcode
			,addressMain
			,addressDetail
			,addressMore
			,defaultYn
			,delYn
		) VALUES (
			#{MBseq}
			<choose>
				<when test="addressName != null and !addressName.equals('')">,#{addressName}</when>
				<otherwise>,"기본배송지"</otherwise>
			</choose>
			,#{addressZipcode}
			,#{addressMain}
			,#{addressDetail}
			,#{addressMore}
			,1
			,0
		)
	<selectKey resultType="String" keyProperty="MAseq" order="AFTER">
		SELECT last_insert_id()
	</selectKey>
	</insert>
	
	<update id="update">
		UPDATE member MB
			SET
				id = #{MBid}
				,password = #{MBpassword}
				,name = #{MBname}
				,gender = #{MBgender}
				,dob = #{MBdob}
				,mobile = #{MBmobile}
				,email = #{MBemail}
				,delYn = #{MBdelYn}
				,grade = #{MBgrade}
		WHERE 1=1
			AND MB.seq = #{MBseq}
	</update>
	
	<select id="selectOneIdCheck" resultType="Integer">
		SELECT
			COUNT(MB.id)
		FROM member MB
	    WHERE 1=1
			AND MB.id = #{MBid}
	</select>
	
	<select id="selectOneId" resultMap="resultMapObj">
		SELECT
			MB.seq AS MBseq
			,MB.id AS MBid
		FROM member MB
		WHERE 1=1
			AND MB.id = #{MBid}
			
	</select>
	
	<select id="selectOneLogin" resultMap="resultMapObj">
		SELECT
			MB.seq AS MBseq
			,MB.id AS MBid
			,MB.name AS MBname
			,MB.grade AS MBgrade
		FROM member MB
		WHERE 1=1
			AND MB.id = #{MBid}
			<if test="MBpassword != null and !MBpassword.equals('')">AND MB.password = #{MBpassword}</if>
	</select>
	
	<select id="snsLoginCheck" resultMap="resultMapObj">
		SELECT
			MB.seq AS MBseq
		    ,MB.id AS MBid
		    ,MB.name AS MBname
		    ,MB.email AS MBemail
		    ,MB.snsYn AS snsYn
		FROM member MB
			WHERE 1=1
		AND MB.email = #{MBemail}
		AND MB.name = #{MBname}
		AND snsId = #{snsId}
	</select>
	
	<insert id="kakaoInst">
		INSERT INTO member (
			id
		    ,name
		    ,email
		    ,regDate
		    ,snsId
		    ,snsYn
		) VALUES (
			#{snsId}
		    ,#{MBname}
		    ,#{MBemail}
		    ,NOW()
		    ,#{snsId}
		    ,1
		)
		<selectKey resultType="String" keyProperty="MBseq" order="AFTER">
		SELECT last_insert_id()
		</selectKey>
	</insert>
	

</mapper>	